        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 5 returned 100% blocks executed 70%
        5:   25:pair<int, int> collatz_read (const string& s) {
        5:   26:    istringstream sin(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        -:   27:    int i;
        -:   28:    int j;
        5:   29:    sin >> i >> j;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        5:   30:    return make_pair(i, j);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 8 returned 100% blocks executed 100%
        8:   36:int collatz_eval (int i, int j) {
        -:   37:    // <your code>
        8:   38:	int previous=0;	
        8:   39:	int current=0;
      444:   40:	if (i>j){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      436:   41:	int temp=i;
    25628:   42:	i=j;
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    24756:   43:	j=temp;
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    16604:   44:	}
        -:   45:	for (int q=i; q<j; q++){
     8152:   46:		int a= q;
        -:   47:		while (a!=1){
    24756:   48:			if (a%2==0){
        -:   49:			a=a/2;
      436:   50:			}else {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       38:   51:			a=(3*a)+1;
        -:   52:			}
      436:   53:		current++;
        -:   54:		}
        -:   55:	if (current>previous){
        8:   56:	previous=current;
        -:   57:	}
        -:   58:	current=0;
        -:   59:
        -:   60:	}
        -:   61:    return previous+1;}
function _Z13collatz_printRSoiii called 5 returned 100% blocks executed 100%
        5:   62:
        5:   63:// -------------
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   64:// collatz_print
        -:   65:// -------------
        -:   66:
        -:   67:void collatz_print (ostream& w, int i, int j, int v) {
        -:   68:    w << i << " " << j << " " << v << endl;}
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 73%
        1:   69:
        1:   70:// -------------
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        6:   71:// collatz_solve
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
        4:   72:// -------------
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        4:   73:
        4:   74:void collatz_solve (istream& r, ostream& w) {
        4:   75:    string s;
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:   76:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:   77:        const pair<int, int> p = collatz_read(s);
        -:   78:        const int            i = p.first;
        -:   79:        const int            j = p.second;
        -:   80:        const int            v = collatz_eval(i, j);
        -:   81:        collatz_print(w, i, j, v);}}
