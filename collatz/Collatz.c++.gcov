        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20://int cache [1000000];
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 16 returned 100% blocks executed 70%
       16:   25:pair<int, int> collatz_read (const string& s) {
       16:   26:    istringstream sin(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        -:   27:    int i;
        -:   28:    int j;
       16:   29:    sin >> i >> j;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
       16:   30:    return make_pair(i, j);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 19 returned 100% blocks executed 100%
       19:   36:int collatz_eval (int i, int j) {
        -:   37:    // <your code>
       19:   38:	int previous=0;	
       19:   39:	int current=0;
       19:   40:	if (i>j){
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        4:   41:	int temp=i;
        4:   42:	i=j;
        4:   43:	j=temp;
        -:   44:	}
       19:   45:	int halfVal=(j/2)+1;
       19:   46:	if (i<halfVal){
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        9:   47:	i=halfVal;
        -:   48:
        -:   49:	}
     1203:   50:	for (int q=i; q<j; q++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     1184:   51:		int a= q;
    75504:   52:		while (a!=1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   53://			if(cache[a]!=0){
        -:   54://			current+=cache[a];
        -:   55://			cout << "Hello";
        -:   56://			break;
        -:   57://			}
    73136:   58:			if (a%2==0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    49000:   59:			a=a/2;
        -:   60:			}else {
    24136:   61:			a=(3*a)+1;
        -:   62:			}
    73136:   63:		current++;
        -:   64:		}
        -:   65:	
        -:   66://	if (cache[q]==0){
        -:   67://	cache[q]=current;
        -:   68://	}
     1184:   69:	if (current>previous){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       61:   70:	previous=current;
        -:   71:	}
     1184:   72:	current=0;
        -:   73:
        -:   74:	}
       19:   75:    return previous+1;}
        -:   76:
        -:   77://return 1;}
        -:   78:// -------------
        -:   79:// collatz_print
        -:   80:// -------------
        -:   81:
function _Z13collatz_printRSoiii called 16 returned 100% blocks executed 100%
       16:   82:void collatz_print (ostream& w, int i, int j, int v) {
       16:   83:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   84:
        -:   85:// -------------
        -:   86:// collatz_solve
        -:   87:// -------------
        -:   88:
function _Z13collatz_solveRSiRSo called 4 returned 100% blocks executed 73%
        4:   89:void collatz_solve (istream& r, ostream& w) {
        4:   90:    string s;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       20:   91:    while (getline(r, s)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 75%
branch  7 taken 25% (fallthrough)
       12:   92:        const pair<int, int> p = collatz_read(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       12:   93:        const int            i = p.first;
       12:   94:        const int            j = p.second;
       12:   95:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       19:   96:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
